\chapter{Introduction}
% history
The search for effective and efficient methods to structure CSS Code dates back to 2003.\footnote{cf. \cite{methodmails}}
In the recent years several different CSS Methodologies have been published.
These include both new solutions as well as some that have evolved from others.\footnote{\cite{methodologyoverview}}
% motivation
Whereas there are several different methodologies available and some widely adopted and successfully implemented, information that compares them against each other is scarce.
% aim
The objective of this publication is to provide an informational baseline comparing individual methodologies.
The target audience of this for developers and management involved in the decision-making process of the selection of a suitable CSS Methodology for a web frontend project.
The methodologies Atomic CSS, SMACSS, Suit BEM, MPG, OOCSS and the edX CSS Style guide will be covered here.




%%%%%%%%%%%%
% These Methodologies usually covers naming conventions, categorization of rules with the aim of helping developers create both maintainable and scalable stylesheets.
% Software development methodologies aim to provide a structure to the development of software systems.
% Build tools like CSS Preprocessors solve similar problems.
% On one hand they also provide tools that may improve the speed of the development process with CSS methodologies.
% On the other hand they also have the potential to increase the complexity of concrete development workflows.
% Some of the caveats of CSS listed in the following are solved already or may be solved in the near future.
% As a language that is primarily interpreted by different web browsers, e.g. expectedly inconsistent environments, relying on these features may result in fragile code.

\chapter{CSS Methodologies}
% definition
CSS methodologies deviate from the actual definition of software development methodologies as they tend to also deal with problems on a more concrete level.
This means they do not only provide a development process structure, but often define patterns and naming conventions.
To provide consistency with established terminology `CSS methodology' defines what was just described for the context of this paper.

% processes
Some CSS methodologies provide guides for classifying CSS rules.
Usually, this 


% patterns
Harrison and Coplien consider human communication as ``the bottleneck in software development''\footnote{\cite{coplienpatterns} S.3}
Like any other language developers are confronted with problems that have been solved before.
The purpose of patterns is to provide proven and tested solutions to these problems.
They ``capture hidden structure'', problem structures that may be solved intuitively, however the solution is not guaranteed to be proven and tested. \footnote{\cite{coplienpatterns} S.5}
CSS methodologies provide pattterns  for both general and domain-specific caveats of CSS.
% In addition to structuring the process of CSS code creating the presentend methodologies usually provide styleguide of varied specificity.


% \begin{itemize}
%     \item processes
%     \item patterns
%     \item concrete styleguide
% \end{itemize}

% compatibility
inter-methodology
styleguides: more specific
frameworks
All methodologies are suitable to be embedded in frameworks, some methodologies are presented within the context of pattern libraries.
BEM by Yandex or the edX pattern library are rather holistic frameworks for the development of web frontends that 
yandex: speed up development and development in teamobjectives



\chapter{Criterea}

%  scoping

%  specificity

%  informational duplication
causes
scope leaks
specificity
re-usability
downsides
DRY not  respected
no singular representation of each informational entity: neither higher-language constructs nor variables\cite{caniusevariables} 
Scalability
    adding more pages:
    adding more styles

    maintainable: readable
decoupling
problems:
file structure
solved with patterns
several solutions
What is a pattern?
methodologies provide patterns
un-pattern: code and fix


\chapter{Results}

\chapter{Conclusions}









\begin{itemize}
    \item reusability: is it possible to avoid the duplication of information?
    \item effectivity: do we have to break the rules to achieve a goal?
    \item efficiency: How much code has to be written to achieve that goal?
    \item scoping
    \item specificity
    \item naming
    \item semantics: do class names relate to the content they apply to?
\end{itemize}





development process underpinns concrete processes with broader understanding
utilises patterns


bootstrap: framework code is atomic css, often non-semantic
CSS normalize because industry standard
preprocessors in usage, but not results
provide unified output
not: performance
% observations
\section{Summary}
% 


\chapter{Outro}
conclusions
outlook
preprocessors

% methods
To measure the performance of individual methodologies, an interface, namely Google search, will be re-created.
reasons: not overly complex, popular, 
The source-code produced while adhering to the rules of the respective methodology will be evaluated using the following criterea:
\begin{itemize}
    \item semantics: do class names relate to the content they apply to?
    \item reusability: is it possible to avoid the duplication of information?
    \item effectivity: do we have to break the rules to achieve a goal?
    \item efficiency: How much code has to be written to achieve that goal?
\end{itemize}


The individual methodologies dictate the usage of different 
The way a rule selector is structured may impact render performance. 
Because the differences between are fairly small, the impact is here considered insignificant and performance is not an evaluation criterium.\footnote{\cite{selectorperformance}}

% crap??:
This leaves to indicate that not all criterea measure conditions that affect end-users but all criterea affect developers.
That means the results
perspective:
dev ergonomy \& performance
%  

% todo: create exact scales for individual criterea
